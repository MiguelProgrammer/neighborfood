/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package _generated_sources_swagger;

import br.com.techchallenge.fiap.model.AnalystDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-05-01T12:13:14.856070800-03:00[GMT-03:00]")
@Validated
@Tag(name = "Analyst", description = "Manage Analyst")
public interface AnalystApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /analyst/create : Add a new analyst to the internal talent
     * Add a new analyst to the internal talent
     *
     * @param analystDTO Create a new analyst in the internal talent (optional)
     * @return Successful operation (status code 200)
     *         or Invalid input (status code 405)
     */
    @Operation(
        operationId = "addAnalyst",
        summary = "Add a new analyst to the internal talent",
        description = "Add a new analyst to the internal talent",
        tags = { "Analyst" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AnalystDTO.class))
            }),
            @ApiResponse(responseCode = "405", description = "Invalid input")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/analyst/create",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AnalystDTO> _addAnalyst(
        @Parameter(name = "AnalystDTO", description = "Create a new analyst in the internal talent") @Valid @RequestBody(required = false) AnalystDTO analystDTO
    ) {
        return addAnalyst(analystDTO);
    }

    // Override this method
    default  ResponseEntity<AnalystDTO> addAnalyst(AnalystDTO analystDTO) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"stack\" : \"JAVA\", \"pId\" : 8, \"actuation\" : \"BACK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /analyst/{pId}/delete : Delete Analyst by ID
     * Delete a single Analyst
     *
     * @param pId pId of Analyst to delete (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or pId not found (status code 404)
     */
    @Operation(
        operationId = "deleteAnalystById",
        summary = "Delete Analyst by ID",
        description = "Delete a single Analyst",
        tags = { "Analyst" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation"),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "pId not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/analyst/{pId}/delete"
    )
    default ResponseEntity<Void> _deleteAnalystById(
        @Parameter(name = "pId", description = "pId of Analyst to delete", required = true, in = ParameterIn.PATH) @PathVariable("pId") Long pId
    ) {
        return deleteAnalystById(pId);
    }

    // Override this method
    default  ResponseEntity<Void> deleteAnalystById(Long pId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /analyst/all : List all Analyst
     * Returns a list of Analyst
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getAllAnalyst",
        summary = "List all Analyst",
        description = "Returns a list of Analyst",
        tags = { "Analyst" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AnalystDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/analyst/all",
        produces = { "application/json" }
    )
    default ResponseEntity<AnalystDTO> _getAllAnalyst(
        
    ) {
        return getAllAnalyst();
    }

    // Override this method
    default  ResponseEntity<AnalystDTO> getAllAnalyst() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"stack\" : \"JAVA\", \"pId\" : 8, \"actuation\" : \"BACK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /analyst/{pId} : Find Analyst by ID
     * Returns a single Analyst
     *
     * @param pId pId of Analyst to return (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or pId not found (status code 404)
     */
    @Operation(
        operationId = "getAnalystById",
        summary = "Find Analyst by ID",
        description = "Returns a single Analyst",
        tags = { "Analyst" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AnalystDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "pId not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/analyst/{pId}",
        produces = { "application/json" }
    )
    default ResponseEntity<AnalystDTO> _getAnalystById(
        @Parameter(name = "pId", description = "pId of Analyst to return", required = true, in = ParameterIn.PATH) @PathVariable("pId") Long pId
    ) {
        return getAnalystById(pId);
    }

    // Override this method
    default  ResponseEntity<AnalystDTO> getAnalystById(Long pId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"stack\" : \"JAVA\", \"pId\" : 8, \"actuation\" : \"BACK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /analyst/update : Update an existing analyst
     * Update an existing analyst by Id
     *
     * @param analystDTO Update analyst in the internal talent (optional)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Analyst not found (status code 404)
     *         or Validation exception (status code 405)
     */
    @Operation(
        operationId = "updateAnalyst",
        summary = "Update an existing analyst",
        description = "Update an existing analyst by Id",
        tags = { "Analyst" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AnalystDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Analyst not found"),
            @ApiResponse(responseCode = "405", description = "Validation exception")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/analyst/update",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AnalystDTO> _updateAnalyst(
        @Parameter(name = "AnalystDTO", description = "Update analyst in the internal talent") @Valid @RequestBody(required = false) AnalystDTO analystDTO
    ) {
        return updateAnalyst(analystDTO);
    }

    // Override this method
    default  ResponseEntity<AnalystDTO> updateAnalyst(AnalystDTO analystDTO) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"stack\" : \"JAVA\", \"pId\" : 8, \"actuation\" : \"BACK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
