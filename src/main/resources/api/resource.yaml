openapi: 3.0.0
info:
  title: Swagger NeighborFood - OpenAPI 3.0
  description: |-
    Fiap Challenge - Phase 1 - NeighborFood Project
  termsOfService: http://swagger.io/terms/
  contact:
    email: miguel.silva@mackenzista.com.br
  version: 0.0.1

tags:
  - name: login
    description: "Realizar login, com cpf"
  - name: register
    description: "Se cadastrar via nome, email e cpf"
  - name: menu
    description: "Apresenta os opcionais"
  - name: order
    description: "Realização do pedido"
  - name: payment
    description: "Realização do pagamento"
  - name: follow-up
    description: "Acompanhar status do pedido"
  - name: stock
    description: "Verificar itens do estoque"
  - name: customers
    description: "Para gerenciamento de campanhas promocionais"


paths:

  /neighborfood/login:
    post:
      tags:
        - login
      summary: "Se cadastrar, logar"
      description: "Identificação do cliente"
      operationId: login
      requestBody:
        description: Identifica um cliente logado
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClienteRequest'
      responses:
        '200':
          description: Usuário logado
          content:
            application/json:
              schema:
                $ref: ""
        '400':
          description: request inválida

  /neighborfood/cadastro:
    post:
      tags:
        - register
      summary: "Se cadastrar, logar"
      description: "Cria cliente"
      operationId: register
      requestBody:
        description: Cria um novo cliente
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cliente'
      responses:
        '200':
          description: Usuário logado
          content:
            application/json:
              schema:
                $ref: ""
        '400':
          description: request inválida

  /neighborfood/menu:
    get:
      tags:
        - menu
      summary: "Apresenta o menu com itens opcionais"
      description: "menu de opções"
      operationId: menu
      responses:
        '200':
          description: Usuário logado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Combo'
        '400':
          description: request inválida

  /neighborfood/acompanhamento/{idpedido}:
    get:
      tags:
        - follow-up
      summary: Procura o status de um pedido
      description: Retorna o status de um pedido
      operationId: findOrderByIdOrder
      parameters:
        - name: idpedido
          in: path
          description: id do pedido
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pedido'
        '400':
          description: Id inválido
        '404':
          description: Pedido não encontrado

  /analyst/{pId}:
    get:
      tags:
        - "Analyst"
      summary: Find Analyst by ID
      description: Returns a single Analyst
      operationId: getAnalystById
      parameters:
        - name: pId
          in: path
          description: pId of Analyst to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalystDTO'
        '400':
          description: Invalid ID supplied
        '404':
          description: pId not found

  /analyst/all:
    get:
      tags:
        - "Analyst"
      summary: List all Analyst
      description: Returns a list of Analyst
      operationId: getAllAnalyst
      responses:
        '200':      # Response
          description: OK
          content:  # Response body
            application/json:   # One of media types
              schema:
                $ref: '#/components/schemas/AnalystDTO'
              example:
                - pId: 1
                  actuation: BACK
                  stack: JAVA
                - pId: 2
                  actuation: FRONT
                  stack: ANGULAR

  /analyst/{pId}/delete:
    get:
      tags:
        - "Analyst"
      summary: Delete Analyst by ID
      description: Delete a single Analyst
      operationId: deleteAnalystById
      parameters:
        - name: pId
          in: path
          description: pId of Analyst to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: pId not found

  /analyst/update:
    put:
      tags:
        - "Analyst"
      summary: Update an existing analyst
      description: Update an existing analyst by Id
      operationId: updateAnalyst
      requestBody:
        description: Update analyst in the internal talent
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalystDTO'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalystDTO'
        '400':
          description: Invalid ID supplied
        '404':
          description: Analyst not found
        '405':
          description: Validation exception

components:
  schemas:

    Pedido:
      type: object
      properties:

        id:
          type: integer
          format: int64

        Cliente:
          $ref: '#/components/schemas/Cliente'

        Itens:
          $ref: '#/components/schemas/Itens'

        Acompanhamento:
          $ref: '#/components/schemas/Acompanhamento'

    Itens:
      type: object
      properties:
        comboList:
          type: array
          items:
            $ref: '#/components/schemas/Combo'
        produtoList:
          type: array
          items:
            $ref: '#/components/schemas/Produto'

    Produto:
      type: object
      properties:
        nome:
          type: string
        preco:
          type: number
          format: double
        Categoria:
          type: object
        descricao:
          type: string

    Acompanhamento:
      type: string
      enum:
        - RECEBIDO
        - EM_PREPARACAO
        - PRONTO
        - FINALIZADO

    Combo:
      type: string
      enum:
        - LANCHE
        - ACOMPANHAMENTO
        - BEBIDA
        - SOBREMESA

    ClienteRequest:
      type: object
      properties:
        nome:
          type: string
        email:
          type: string
        cpf:
          type: string

    Cliente:
      type: object


    AnalystDTO:
      required:
        - pId
        - actuation
        - stack
      type: object
      properties:
        pId:
          type: integer
          format: int64
          example: 8
        actuation:
          type: string
          enum:
            - BACK
            - FRONT
            - BLANK
        stack:
          type: string
          enum:
            - JAVA
            - ANGULAR
            - DEVOPS
            - SECURITY_INFORMATION